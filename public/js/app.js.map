{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Item","$resource","id","update","method","ItemsIndexController","itemsIndex","all","query","ItemsShowController","deleteItem","itemsShow","item","$remove","get","params","delete","isLoggedIn","isAuthenticated","ItemsEditController","itemsEdit","$update","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","parseFloat","getPayload","preventDefault","main","message","$on","Router","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","state","url","templateUrl","controller","otherwise","User","UsersIndexController","usersIndex","UsersShowController","isCurrentUser","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('itemsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ItemsIndexController', ItemsIndexController)\n  .controller('ItemsShowController', ItemsShowController)\n  .controller('ItemsEditController', ItemsEditController);\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n\n  itemsIndex.all = Item.query();\n}\nItemsShowController.$inject = ['Item', '$state', '$auth'];\nfunction ItemsShowController(Item, $state, $auth) {\n  const itemsShow = this;\n\n  itemsShow.item = Item.get($state.params);\n\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  itemsShow.delete = deleteItem;\n  itemsShow.isLoggedIn = $auth.isAuthenticated;\n}\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n  const protectedStates = ['usersEdit', 'usersIndex', 'usersShow'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('home');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];\nfunction Router($stateProvider, $urlRouterProvider, $locationProvider) {\n\n  $locationProvider.html5Mode(true);\n\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/user/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('itemsIndex', {\n      url: '/items',\n      templateUrl: '/templates/itemsIndex.html',\n      controller: 'ItemsIndexController as itemsIndex'\n    })\n    .state('itemsShow', {\n      url: '/item/:id',\n      templateUrl: '/templates/itemsShow.html',\n      controller: 'ItemsShowController as itemsShow'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  // get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\nUsersEditController.$inject = ['User', '$state'];\n\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n"]}