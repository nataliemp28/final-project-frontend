{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/models/requestsOffers.js","js/controllers/requestsOffers.js","js/router.js","js/models/swap.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Item","$resource","id","update","method","ItemsIndexController","itemsIndex","all","query","ItemsShowController","User","Swap","isCurrentUser","getPayload","parseFloat","params","toggleForm","itemsShow","formVisible","selectOffer","item","alreadyOffered","newSwap","offer_id","createSwap","save","swap","console","log","deleteItem","$remove","currentUserId","get","$promise","data","item_ids","requests","forEach","request","indexOf","elementPos","items","map","x","objectFound","request_id","accepted","delete","isLoggedIn","isAuthenticated","ItemsNewController","createItem","itemsNew","create","ItemsEditController","itemsEdit","$update","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","preventDefault","main","message","$on","RequestsOffers","RequestsOffersController","$scope","requestsOffersIndex","myRequests","myOffers","requestsOffers","requestOffer","push","splice","$index","Router","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('itemsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ItemsIndexController', ItemsIndexController)\n  .controller('ItemsShowController', ItemsShowController)\n  .controller('ItemsEditController', ItemsEditController)\n  .controller('ItemsNewController', ItemsNewController);\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n\n  itemsIndex.all = Item.query();\n}\n\nItemsShowController.$inject = ['Item', '$state', '$auth', 'User', 'Swap'];\nfunction ItemsShowController(Item, $state, $auth, User, Swap) {\n\n  const itemsShow = this;\n  const currentUserId = $auth.getPayload().id;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n  // get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  itemsShow.isCurrentUser = isCurrentUser;\n  itemsShow.item = Item.get($state.params);\n  itemsShow.formVisible = false;\n\n  function toggleForm() {\n    itemsShow.formVisible = itemsShow.formVisible ? false : true;\n  }\n\n  itemsShow.user = User.get({id: currentUserId});\n\n  Item.get($state.params).$promise.then((data) => {\n    itemsShow.item = data;\n\n    User.get({id: currentUserId}).$promise.then((data) => {\n      itemsShow.user = data;\n\n      console.log('User current items:', itemsShow.user.item_ids);\n\n\n      itemsShow.item.requests.forEach(function(request) {\n\n        // If we've already offered this item before for the same thing then do this:\n        if(itemsShow.user.item_ids.indexOf(request.offer_id) > -1) {\n          const elementPos = itemsShow.user.items.map(function(x) {\n            return x.id;\n          }).indexOf(request.offer_id);\n          const objectFound = itemsShow.user.items[elementPos];\n          objectFound.alreadyOffered = true;\n        }\n      });\n    });\n\n    itemsShow.newSwap = {\n      request_id: itemsShow.item.id,\n      offer_id: null,\n      accepted: false\n    };\n  });\n\n  function selectOffer(item) {\n    if (!item.alreadyOffered) {\n      itemsShow.newSwap.offer_id = item.id;\n    }\n  }\n\n  function createSwap() {\n    // const thisSwap = itemsShow.item.data + resource.request.description.toString();\n    //\n    // if (thisSwap === 'unique')\n\n    Swap.save(itemsShow.newSwap, (swap) => {\n      console.log('saved swap:', swap);\n      $state.go('requestsOffers');\n    });\n  }\n\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  itemsShow.selectOffer = selectOffer;\n  itemsShow.toggleForm = toggleForm;\n  itemsShow.createSwap = createSwap;\n  itemsShow.delete = deleteItem;\n  itemsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nItemsNewController.$inject = ['Item', '$state'];\nfunction ItemsNewController(Item, $state) {\n  const itemsNew = this;\n\n  itemsNew.item = {};\n\n  function createItem() {\n    Item.save(itemsNew.item, () => {\n      $state.go('itemsIndex');\n    });\n  }\n\n  itemsNew.create = createItem;\n}\n\nItemsEditController.$inject = ['Item', '$state'];\n\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('home');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .factory('RequestsOffers', RequestsOffers);\n\nRequestsOffers.$inject = ['$resource', 'API_URL'];\nfunction RequestsOffers($resource, API_URL) {\n  return new $resource(`${API_URL}/swaps/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('RequestsOffersController', RequestsOffersController);\n\nRequestsOffersController.$inject = ['Item', 'Swap', '$state', '$auth', 'RequestsOffers', '$scope'];\n\nfunction RequestsOffersController(Item, Swap, $state, $auth, RequestsOffers, $scope) {\n\n  const requestsOffersIndex = this;\n  const currentUserId = $auth.getPayload().id;\n\n  requestsOffersIndex.myRequests = [];\n  requestsOffersIndex.myOffers = [];\n\n  requestsOffersIndex.all = RequestsOffers.query();\n  requestsOffersIndex.all.$promise.then(requestsOffers => {\n    requestsOffers.forEach(requestOffer => {\n      if (requestOffer.offer_id === currentUserId) {\n        requestsOffersIndex.myRequests.push(requestOffer);\n      } else {\n        requestsOffersIndex.myOffers.push(requestOffer);\n      }\n\n      $scope.delete = function() {\n        $scope.requestsOffers.myRequests.splice(this.$index, 1);\n      };\n    });\n  });\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];\nfunction Router($stateProvider, $urlRouterProvider, $locationProvider) {\n\n  $locationProvider.html5Mode(true);\n\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/user/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersProfile', {\n      url: '/users/profile',\n      templateUrl: '/templates/usersProfile.html',\n      controller: 'UsersShowController as usersProfile'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('itemsIndex', {\n      url: '/items',\n      templateUrl: '/templates/itemsIndex.html',\n      controller: 'ItemsIndexController as itemsIndex'\n    })\n    .state('itemsShow', {\n      url: '/items/:id',\n      templateUrl: '/templates/itemsShow.html',\n      controller: 'ItemsShowController as itemsShow'\n    })\n    .state('itemsEdit', {\n      url: '/items/:id/edit',\n      templateUrl: '/templates/itemsEdit.html',\n      controller: 'ItemsEditController as itemsEdit'\n    })\n    .state('itemsNew', {\n      url: '/items/new',\n      templateUrl: '/templates/itemsNew.html',\n      controller: 'ItemsNewController as itemsNew'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n    })\n    .state('requestsOffers', {\n      url: '/requestsOffers',\n      templateUrl: '/templates/requestsOffers.html',\n      controller: 'RequestsOffersController as requestsOffers'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .factory('Swap', Swap);\n\nSwap.$inject = ['$resource', 'API_URL'];\nfunction Swap($resource, API_URL) {\n  return new $resource(`${API_URL}/swaps/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  // get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\nUsersEditController.$inject = ['User', '$state'];\n\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n"]}