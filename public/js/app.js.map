{"version":3,"sources":["js/app.js","js/controllers/auth.js","js/models/item.js","js/controllers/items.js","js/controllers/main.js","js/router.js","js/models/swap.js","js/models/user.js","js/controllers/users.js"],"names":["Auth","$authProvider","API_URL","loginUrl","signupUrl","tokenPrefix","RegisterController","$auth","$state","submit","signup","register","user","then","go","this","LoginController","login","credentials","Item","$resource","id","update","method","ItemsIndexController","itemsIndex","all","query","ItemsShowController","User","Swap","isCurrentUser","getPayload","parseFloat","params","selectOffer","itemsShow","newSwap","offer_id","createSwap","save","swap","console","log","deleteItem","item","$remove","currentUserId","get","$promise","data","request_id","accepted","delete","isLoggedIn","isAuthenticated","ItemsEditController","itemsEdit","$update","MainController","$rootScope","logout","secureState","e","toState","toParams","protectedStates","includes","name","preventDefault","main","message","$on","Router","$stateProvider","$urlRouterProvider","$locationProvider","html5Mode","state","url","templateUrl","controller","otherwise","UsersIndexController","usersIndex","UsersShowController","deleteUser","usersShow","UsersEditController","usersEdit","angular","module","constant","config","$inject","factory"],"mappings":"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","file":"app.js","sourcesContent":["angular.module('finalProject', ['ngResource', 'ui.router', 'satellizer'])\n  .constant('API_URL', 'http://localhost:3000/api')\n  .config(Auth);\n\nAuth.$inject = ['$authProvider', 'API_URL'];\nfunction Auth($authProvider, API_URL) {\n  $authProvider.loginUrl = `${API_URL}/login`;\n  $authProvider.signupUrl = `${API_URL}/register`;\n\n  $authProvider.tokenPrefix = '';\n}\n","angular.module('finalProject')\n  .controller('RegisterController', RegisterController)\n  .controller('LoginController', LoginController);\n\nRegisterController.$inject = ['$auth', '$state'];\nfunction RegisterController($auth, $state) {\n  const register = this;\n\n  register.user = {};\n\n  function submit() {\n    $auth.signup(register.user)\n      .then(() => {\n        $state.go('login');\n      });\n  }\n  register.submit = submit;\n}\n\nLoginController.$inject = ['$auth', '$state'];\nfunction LoginController($auth, $state) {\n  const login = this;\n\n  login.credentials = {};\n\n  function submit() {\n    $auth.login(login.credentials)\n      .then(() => {\n        $state.go('itemsIndex');\n      });\n  }\n\n  login.submit = submit;\n}\n","angular.module('finalProject')\n  .factory('Item', Item);\n\nItem.$inject = ['$resource', 'API_URL'];\nfunction Item($resource, API_URL) {\n  return new $resource(`${API_URL}/items/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .controller('ItemsIndexController', ItemsIndexController)\n  .controller('ItemsShowController', ItemsShowController)\n  .controller('ItemsEditController', ItemsEditController);\n\nItemsIndexController.$inject = ['Item'];\nfunction ItemsIndexController(Item) {\n  const itemsIndex = this;\n\n  itemsIndex.all = Item.query();\n}\n\nItemsShowController.$inject = ['Item', '$state', '$auth', 'User', 'Swap'];\nfunction ItemsShowController(Item, $state, $auth, User, Swap) {\n\n  const itemsShow = this;\n  const currentUserId = $auth.getPayload().id;\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n  // get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  itemsShow.isCurrentUser = isCurrentUser;\n  itemsShow.item = Item.get($state.params);\n\n  itemsShow.user = User.get({id: currentUserId});\n\n  Item.get($state.params).$promise.then((data) => {\n    itemsShow.item = data;\n\n    itemsShow.newSwap = {\n      request_id: itemsShow.item.id,\n      offer_id: null,\n      accepted: false\n    };\n  });\n\n  function selectOffer(id) {\n    itemsShow.newSwap.offer_id = id;\n  }\n\n  function createSwap() {\n    Swap.save(itemsShow.newSwap, (swap) => {\n      // $state.go('userSwaps') To be updated\n      console.log('saved:', swap);\n    });\n  }\n\n  function deleteItem() {\n    itemsShow.item.$remove(() => {\n      $state.go('itemsIndex');\n    });\n  }\n  itemsShow.selectOffer = selectOffer;\n  itemsShow.createSwap = createSwap;\n  itemsShow.delete = deleteItem;\n  itemsShow.isLoggedIn = $auth.isAuthenticated;\n}\n\nItemsEditController.$inject = ['Item', '$state'];\nfunction ItemsEditController(Item, $state) {\n  const itemsEdit = this;\n\n  itemsEdit.item = Item.get($state.params);\n\n  function update() {\n    itemsEdit.item.$update(() => {\n      $state.go('itemsShow', $state.params);\n    });\n  }\n\n  this.update = update;\n\n}\n","angular.module('finalProject')\n.controller('MainController', MainController);\n\nMainController.$inject = ['$auth', '$state', '$rootScope'];\nfunction MainController($auth, $state, $rootScope) {\n  const main = this;\n\n  main.isLoggedIn = $auth.isAuthenticated;\n  main.message = null;\n  function logout() {\n    $auth.logout()\n    .then(() => {\n      $state.go('home');\n    });\n  }\n  const protectedStates = ['usersEdit'];\n\n  function secureState(e, toState, toParams) {\n\n    if((!$auth.isAuthenticated() &&\n    protectedStates.includes(toState.name)) ||\n    toState.name === 'usersEdit' && (parseFloat(toParams.id) !== $auth.getPayload().id)) {\n      e.preventDefault();\n      $state.go('home');\n    }\n  }\n\n  $rootScope.$on('$stateChangeStart', secureState);\n\n  main.logout = logout;\n}\n","angular.module('finalProject')\n  .config(Router);\n\nRouter.$inject = ['$stateProvider', '$urlRouterProvider', '$locationProvider'];\nfunction Router($stateProvider, $urlRouterProvider, $locationProvider) {\n\n  $locationProvider.html5Mode(true);\n\n  $stateProvider\n    .state('usersIndex', {\n      url: '/users',\n      templateUrl: '/templates/usersIndex.html',\n      controller: 'UsersIndexController as usersIndex'\n    })\n    .state('register', {\n      url: '/register',\n      templateUrl: '/templates/register.html',\n      controller: 'RegisterController as register'\n    })\n    .state('login', {\n      url: '/login',\n      templateUrl: '/templates/login.html',\n      controller: 'LoginController as login'\n    })\n    .state('usersShow', {\n      url: '/user/:id',\n      templateUrl: '/templates/usersShow.html',\n      controller: 'UsersShowController as usersShow'\n    })\n    .state('usersEdit', {\n      url: '/users/:id/edit',\n      templateUrl: '/templates/usersEdit.html',\n      controller: 'UsersEditController as usersEdit'\n    })\n    .state('itemsIndex', {\n      url: '/items',\n      templateUrl: '/templates/itemsIndex.html',\n      controller: 'ItemsIndexController as itemsIndex'\n    })\n    .state('itemsShow', {\n      url: '/item/:id',\n      templateUrl: '/templates/itemsShow.html',\n      controller: 'ItemsShowController as itemsShow'\n    })\n    .state('itemsEdit', {\n      url: '/items/:id/edit',\n      templateUrl: '/templates/itemsEdit.html',\n      controller: 'ItemsEditController as itemsEdit'\n    })\n    .state('home', {\n      url: '/',\n      templateUrl: '/templates/home.html'\n    })\n    .state('requestsOffers', {\n      url: '/requestsOffers',\n      templateUrl: '/templates/requestsOffers.html',\n      controller: 'RequestsOffersController as requestsOffers'\n    });\n\n  $urlRouterProvider.otherwise('/');\n}\n","angular.module('finalProject')\n  .factory('Swap', Swap);\n\nSwap.$inject = ['$resource', 'API_URL'];\nfunction Swap($resource, API_URL) {\n  return new $resource(`${API_URL}/swaps/:id`, { id: '@_id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n  .factory('User', User);\n\nUser.$inject = ['$resource', 'API_URL'];\nfunction User($resource, API_URL) {\n  return new $resource(`${API_URL}/users/:id`, { id: '@id' }, {\n    update: { method: 'PUT' }\n  });\n}\n","angular.module('finalProject')\n.controller('UsersIndexController', UsersIndexController)\n.controller('UsersShowController', UsersShowController)\n.controller('UsersEditController', UsersEditController);\n\nUsersIndexController.$inject = ['User'];\nfunction UsersIndexController(User) {\n  const usersIndex = this;\n\n  usersIndex.all = User.query();\n}\n\nUsersShowController.$inject = ['User', '$state', '$auth'];\nfunction UsersShowController(User, $state, $auth) {\n\n  const usersShow = this;\n  usersShow.user = User.get($state.params);\n\n  function isCurrentUser() {\n    return $auth.getPayload().id === parseFloat($state.params.id);\n  }\n\n  // get payload gives us current users id - user ID is IN TOKEN (BACKEND)\n  usersShow.isCurrentUser = isCurrentUser;\n  usersShow.user = User.get($state.params);\n\n  function deleteUser() {\n    usersShow.user.$remove(() => {\n      $state.go('usersIndex');\n    });\n  }\n\n  usersShow.delete = deleteUser;\n  usersShow.isLoggedIn = $auth.isAuthenticated;\n}\nUsersEditController.$inject = ['User', '$state'];\n\nfunction UsersEditController(User, $state) {\n  const usersEdit = this;\n\n  usersEdit.user = User.get($state.params);\n\n  function update() {\n    usersEdit.user.$update(() => {\n      $state.go('usersShow', $state.params);\n    });\n  }\n  this.update = update;\n}\n"]}